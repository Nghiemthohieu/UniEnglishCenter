package repo

import (
	"fmt"
	"uni_server/global"
	"uni_server/internal/models"
	util "uni_server/pkg/utils"
)

type InterviewListRepo struct{}

func NewInterviewListRepo() *InterviewListRepo {
	return &InterviewListRepo{}
}

// üìå T·∫°o m·ªõi m·ªôt b·∫£n ghi ph·ªèng v·∫•n
func (repo *InterviewListRepo) CreateInterview(interview models.InterviewList) error {
	tx := global.Mdb.Begin()
	if err := tx.Create(&interview).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi l∆∞u th√¥ng tin ph·ªèng v·∫•n: %v", err)
	}
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("l·ªói khi commit transaction: %v", err)
	}
	return nil
}

// üìå C·∫≠p nh·∫≠t th√¥ng tin ph·ªèng v·∫•n
func (repo *InterviewListRepo) UpdateInterview(interview models.InterviewList) error {
	tx := global.Mdb.Begin()

	var existingInterview models.InterviewList
	if err := tx.First(&existingInterview, interview.ID).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m th√¥ng tin ph·ªèng v·∫•n: %v", err)
	}

	// Gi·ªØ nguy√™n th·ªùi gian t·∫°o
	interview.CreatedAt = existingInterview.CreatedAt
	if err := tx.Save(&interview).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ph·ªèng v·∫•n: %v", err)
	}
	tx.Commit()
	return nil
}

// üìå L·∫•y danh s√°ch ph·ªèng v·∫•n c√≥ ph√¢n trang
func (repo *InterviewListRepo) GetAllInterviews(paging util.Paging) ([]models.InterviewList, int64, error) {
	var interviews []models.InterviewList
	var total int64

	// L·∫•y t·ªïng s·ªë b·∫£n ghi
	if err := global.Mdb.Model(&models.InterviewList{}).Count(&total).Error; err != nil {
		return nil, 0, fmt.Errorf("l·ªói khi l·∫•y t·ªïng s·ªë cu·ªôc ph·ªèng v·∫•n: %v", err)
	}

	offset := (paging.Page - 1) * paging.Limit
	if err := global.Mdb.Preload("Human").Limit(paging.Limit).Offset(offset).Find(&interviews).Error; err != nil {
		return nil, 0, fmt.Errorf("l·ªói khi l·∫•y danh s√°ch ph·ªèng v·∫•n: %v", err)
	}
	return interviews, total, nil
}

// üìå L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt cu·ªôc ph·ªèng v·∫•n theo ID
func (repo *InterviewListRepo) GetInterviewByID(id uint) (*models.InterviewList, error) {
	var interview models.InterviewList
	if err := global.Mdb.Preload("Human").First(&interview, id).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y th√¥ng tin ph·ªèng v·∫•n theo ID: %v", err)
	}
	return &interview, nil
}

// üìå X√≥a m·ªôt b·∫£n ghi ph·ªèng v·∫•n theo ID
func (repo *InterviewListRepo) DeleteInterview(id uint) error {
	tx := global.Mdb.Begin()

	var interview models.InterviewList
	if err := tx.First(&interview, id).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m th√¥ng tin ph·ªèng v·∫•n ƒë·ªÉ x√≥a: %v", err)
	}

	if err := tx.Delete(&interview).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi x√≥a th√¥ng tin ph·ªèng v·∫•n: %v", err)
	}

	tx.Commit()
	return nil
}

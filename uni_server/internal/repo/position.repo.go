package repo

import (
	"fmt"
	"uni_server/global"
	"uni_server/internal/models"
)

type PositionRepo struct{}

func NewPositionRepo() *PositionRepo {
	return &PositionRepo{}
}

// üìå T·∫°o m·ªõi m·ªôt v·ªã tr√≠ c√¥ng vi·ªác
func (repo *PositionRepo) CreatePosition(position models.Position) error {
	tx := global.Mdb.Begin()
	if err := tx.Create(&position).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi l∆∞u v·ªã tr√≠ c√¥ng vi·ªác: %v", err)
	}
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("l·ªói khi commit transaction: %v", err)
	}
	return nil
}

// üìå C·∫≠p nh·∫≠t th√¥ng tin v·ªã tr√≠ c√¥ng vi·ªác
func (repo *PositionRepo) UpdatePosition(position models.Position) error {
	tx := global.Mdb.Begin()

	var existingPosition models.Position
	if err := tx.First(&existingPosition, position.ID).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m v·ªã tr√≠ c√¥ng vi·ªác: %v", err)
	}

	// Gi·ªØ nguy√™n th·ªùi gian t·∫°o
	position.CreatedAt = existingPosition.CreatedAt
	if err := tx.Save(&position).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t v·ªã tr√≠ c√¥ng vi·ªác: %v", err)
	}
	tx.Commit()
	return nil
}

// üìå L·∫•y danh s√°ch v·ªã tr√≠ c√¥ng vi·ªác c√≥ ph√¢n trang
func (repo *PositionRepo) GetAllPositions() ([]models.Position, error) {
	var positions []models.Position

	if err := global.Mdb.Find(&positions).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y danh s√°ch v·ªã tr√≠ c√¥ng vi·ªác: %v", err)
	}
	return positions, nil
}

// üìå L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt v·ªã tr√≠ c√¥ng vi·ªác theo ID
func (repo *PositionRepo) GetPositionByID(id uint) (*models.Position, error) {
	var position models.Position
	if err := global.Mdb.First(&position, id).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y v·ªã tr√≠ c√¥ng vi·ªác theo ID: %v", err)
	}
	return &position, nil
}

// üìå X√≥a m·ªôt v·ªã tr√≠ c√¥ng vi·ªác theo ID
func (repo *PositionRepo) DeletePosition(id uint) error {
	tx := global.Mdb.Begin()

	var position models.Position
	if err := tx.First(&position, id).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m v·ªã tr√≠ c√¥ng vi·ªác ƒë·ªÉ x√≥a: %v", err)
	}

	if err := tx.Delete(&position).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi x√≥a v·ªã tr√≠ c√¥ng vi·ªác: %v", err)
	}

	tx.Commit()
	return nil
}

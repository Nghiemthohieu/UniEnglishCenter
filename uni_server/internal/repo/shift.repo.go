package repo

import (
	"fmt"
	"uni_server/global"
	"uni_server/internal/models"
)

type ShiftRepo struct{}

func NewShiftRepo() *ShiftRepo {
	return &ShiftRepo{}
}

// üìå T·∫°o m·ªõi m·ªôt ca l√†m vi·ªác
func (repo *ShiftRepo) CreateShift(shift models.Shift) error {
	tx := global.Mdb.Begin()
	if err := tx.Create(&shift).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi l∆∞u ca l√†m vi·ªác: %v", err)
	}
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("l·ªói khi commit transaction: %v", err)
	}
	return nil
}

// üìå C·∫≠p nh·∫≠t th√¥ng tin ca l√†m vi·ªác
func (repo *ShiftRepo) UpdateShift(shift models.Shift) error {
	tx := global.Mdb.Begin()

	var existingShift models.Shift
	if err := tx.First(&existingShift, shift.ID).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m ca l√†m vi·ªác: %v", err)
	}

	// Gi·ªØ nguy√™n th·ªùi gian t·∫°o
	shift.CreatedAt = existingShift.CreatedAt
	if err := tx.Save(&shift).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t ca l√†m vi·ªác: %v", err)
	}
	tx.Commit()
	return nil
}

// üìå L·∫•y danh s√°ch ca l√†m vi·ªác c√≥ ph√¢n trang
func (repo *ShiftRepo) GetAllShifts() ([]models.Shift, error) {
	var shifts []models.Shift

	if err := global.Mdb.Find(&shifts).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y danh s√°ch ca l√†m vi·ªác: %v", err)
	}
	return shifts, nil
}

// üìå L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ca l√†m vi·ªác theo ID
func (repo *ShiftRepo) GetShiftByID(id uint) (*models.Shift, error) {
	var shift models.Shift
	if err := global.Mdb.First(&shift, id).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y ca l√†m vi·ªác theo ID: %v", err)
	}
	return &shift, nil
}

// üìå X√≥a m·ªôt ca l√†m vi·ªác theo ID
func (repo *ShiftRepo) DeleteShift(id uint) error {
	tx := global.Mdb.Begin()

	var shift models.Shift
	if err := tx.First(&shift, id).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m ca l√†m vi·ªác ƒë·ªÉ x√≥a: %v", err)
	}

	if err := tx.Delete(&shift).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi x√≥a ca l√†m vi·ªác: %v", err)
	}

	tx.Commit()
	return nil
}

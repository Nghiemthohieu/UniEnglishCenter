package repo

import (
	"fmt"
	"uni_server/global"
	"uni_server/internal/models"
	util "uni_server/pkg/utils"
)

type TimeKeepingRepo struct{}

func NewTimeKeepingRepo() *TimeKeepingRepo {
	return &TimeKeepingRepo{}
}

// üìå T·∫°o m·ªõi m·ªôt b·∫£n ghi ch·∫•m c√¥ng
func (repo *TimeKeepingRepo) CreateTimeKeeping(timeKeeping models.TimeKeeping) error {
	tx := global.Mdb.Begin()
	if err := tx.Create(&timeKeeping).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi l∆∞u ch·∫•m c√¥ng: %v", err)
	}
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("l·ªói khi commit transaction: %v", err)
	}
	return nil
}

// üìå C·∫≠p nh·∫≠t th√¥ng tin ch·∫•m c√¥ng
func (repo *TimeKeepingRepo) UpdateTimeKeeping(timeKeeping models.TimeKeeping) error {
	tx := global.Mdb.Begin()

	var existingTimeKeeping models.TimeKeeping
	if err := tx.First(&existingTimeKeeping, timeKeeping.ID).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m th√¥ng tin ch·∫•m c√¥ng: %v", err)
	}

	// Gi·ªØ nguy√™n th·ªùi gian t·∫°o
	timeKeeping.CreatedAt = existingTimeKeeping.CreatedAt
	if err := tx.Save(&timeKeeping).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t ch·∫•m c√¥ng: %v", err)
	}
	tx.Commit()
	return nil
}

// üìå L·∫•y danh s√°ch ch·∫•m c√¥ng c√≥ ph√¢n trang
func (repo *TimeKeepingRepo) GetAllTimeKeepings(paging util.Paging) ([]models.TimeKeeping, int64, error) {
	var timeKeepings []models.TimeKeeping
	var total int64

	// L·∫•y t·ªïng s·ªë b·∫£n ghi
	if err := global.Mdb.Model(&models.TimeKeeping{}).Count(&total).Error; err != nil {
		return nil, 0, fmt.Errorf("l·ªói khi l·∫•y t·ªïng s·ªë ch·∫•m c√¥ng: %v", err)
	}

	offset := (paging.Page - 1) * paging.Limit
	if err := global.Mdb.Preload("Human").Preload("Position").Limit(paging.Limit).Offset(offset).Find(&timeKeepings).Error; err != nil {
		return nil, 0, fmt.Errorf("l·ªói khi l·∫•y danh s√°ch ch·∫•m c√¥ng: %v", err)
	}
	return timeKeepings, total, nil
}

// üìå L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt b·∫£n ghi ch·∫•m c√¥ng theo ID
func (repo *TimeKeepingRepo) GetTimeKeepingByID(id uint) (*models.TimeKeeping, error) {
	var timeKeeping models.TimeKeeping
	if err := global.Mdb.Preload("Human").Preload("Position").First(&timeKeeping, id).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y th√¥ng tin ch·∫•m c√¥ng theo ID: %v", err)
	}
	return &timeKeeping, nil
}

// üìå X√≥a m·ªôt b·∫£n ghi ch·∫•m c√¥ng theo ID
func (repo *TimeKeepingRepo) DeleteTimeKeeping(id uint) error {
	tx := global.Mdb.Begin()

	var timeKeeping models.TimeKeeping
	if err := tx.First(&timeKeeping, id).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m th√¥ng tin ch·∫•m c√¥ng ƒë·ªÉ x√≥a: %v", err)
	}

	if err := tx.Delete(&timeKeeping).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi x√≥a th√¥ng tin ch·∫•m c√¥ng: %v", err)
	}

	tx.Commit()
	return nil
}

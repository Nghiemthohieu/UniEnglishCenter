package repo

import (
	"fmt"
	"uni_server/global"
	"uni_server/internal/models"
	util "uni_server/pkg/utils"
)

type WorkCalendarRepo struct{}

func NewWorkCalendarRepo() *WorkCalendarRepo {
	return &WorkCalendarRepo{}
}

// üìå T·∫°o m·ªõi m·ªôt b·∫£n ghi l·ªãch l√†m vi·ªác
func (repo *WorkCalendarRepo) CreateWorkCalendar(workCalendar models.WorkCalendar) error {
	tx := global.Mdb.Begin()
	if err := tx.Create(&workCalendar).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi l∆∞u l·ªãch l√†m vi·ªác: %v", err)
	}
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("l·ªói khi commit transaction: %v", err)
	}
	return nil
}

// üìå C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác
func (repo *WorkCalendarRepo) UpdateWorkCalendar(workCalendar models.WorkCalendar) error {
	tx := global.Mdb.Begin()

	var existingWorkCalendar models.WorkCalendar
	if err := tx.First(&existingWorkCalendar, workCalendar.ID).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m l·ªãch l√†m vi·ªác: %v", err)
	}

	// Gi·ªØ nguy√™n th·ªùi gian t·∫°o
	workCalendar.CreatedAt = existingWorkCalendar.CreatedAt
	if err := tx.Save(&workCalendar).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác: %v", err)
	}
	tx.Commit()
	return nil
}

// üìå L·∫•y danh s√°ch l·ªãch l√†m vi·ªác c√≥ ph√¢n trang
func (repo *WorkCalendarRepo) GetAllWorkCalendars(paging util.Paging) ([]models.WorkCalendar, int64, error) {
	var workCalendars []models.WorkCalendar
	var total int64

	// L·∫•y t·ªïng s·ªë b·∫£n ghi
	if err := global.Mdb.Model(&models.WorkCalendar{}).Count(&total).Error; err != nil {
		return nil, 0, fmt.Errorf("l·ªói khi l·∫•y t·ªïng s·ªë l·ªãch l√†m vi·ªác: %v", err)
	}

	offset := (paging.Page - 1) * paging.Limit
	if err := global.Mdb.Preload("Human").Limit(paging.Limit).Offset(offset).Find(&workCalendars).Error; err != nil {
		return nil, 0, fmt.Errorf("l·ªói khi l·∫•y danh s√°ch l·ªãch l√†m vi·ªác: %v", err)
	}
	return workCalendars, total, nil
}

// üìå L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt l·ªãch l√†m vi·ªác theo ID
func (repo *WorkCalendarRepo) GetWorkCalendarByID(id uint) (*models.WorkCalendar, error) {
	var workCalendar models.WorkCalendar
	if err := global.Mdb.Preload("Human").First(&workCalendar, id).Error; err != nil {
		return nil, fmt.Errorf("l·ªói khi l·∫•y l·ªãch l√†m vi·ªác theo ID: %v", err)
	}
	return &workCalendar, nil
}

// üìå X√≥a m·ªôt b·∫£n ghi l·ªãch l√†m vi·ªác theo ID
func (repo *WorkCalendarRepo) DeleteWorkCalendar(id uint) error {
	tx := global.Mdb.Begin()

	var workCalendar models.WorkCalendar
	if err := tx.First(&workCalendar, id).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi t√¨m l·ªãch l√†m vi·ªác ƒë·ªÉ x√≥a: %v", err)
	}

	if err := tx.Delete(&workCalendar).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("l·ªói khi x√≥a l·ªãch l√†m vi·ªác: %v", err)
	}

	tx.Commit()
	return nil
}
